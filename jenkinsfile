pipeline {
    agent {
        kubernetes {
            yamlFile 'build-pod.yaml'
            defaultContainer 'ez-docker-helm-build'
        }
    }
    environment {
        GITHUB_CREDENTIALS = credentials('git_hub')
        DOCKER_HUB_USERNAME = credentials('docker_hub')
        DOCKER_HUB_TOKEN = credentials('docker_hub')
        TAG = 'latest'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/maximaxor/devopsfinal.git', credentialsId: 'git_hub']]])
            }
        }
        stage('Install Docker if not present') {
            steps {
                script {
                    // Check if Docker is installed and install it if not
                    sh '''
                        if ! command -v docker &> /dev/null
                        then
                            echo "Docker not found, installing..."
                            curl -fsSL https://get.docker.com -o get-docker.sh
                            sh get-docker.sh
                            sudo usermod -aG docker $(whoami)
                        else
                            echo "Docker is already installed"
                        fi
                    '''
                }
            }
        }
        stage('Set up Docker Buildx') {
            steps {
                script {
                    sh 'docker run --rm --privileged multiarch/qemu-user-static --reset -p yes'
                    sh 'docker buildx create --use --name builder-$(uuidgen)'
                }
            }
        }
        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker_hub', passwordVariable: 'DOCKER_HUB_TOKEN', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh "echo \$DOCKER_HUB_TOKEN | docker login -u \$DOCKER_HUB_USERNAME --password-stdin"
                    }
                }
            }
        }
        stage('Build and Run Containers') {
            steps {
                script {
                    // Sequential build for each service to avoid conflicts
                    def services = [
                        ['name': 'license-registry', 'dockerfile': 'Dockerfile.license-registry'],
                        ['name': 'node', 'dockerfile': './node-app/Dockerfile.node'],
                        ['name': 'image-processor', 'dockerfile': 'Dockerfile.image-processor'],
                        ['name': 'frontend', 'dockerfile': 'Dockerfile.frontend'],
                        ['name': 'orchestrator', 'dockerfile': 'Dockerfile.orchestrator'],
                        ['name': 'api-gateway', 'dockerfile': 'Dockerfile.api-gateway'],
                        ['name': 'mongodb', 'dockerfile': './mongodb/Dockerfile.mongodb']
                    ]
                    services.each { service ->
                        def buildName = "builder-${service.name}"
                        sh "docker buildx create --use --name ${buildName}"
                        sh "docker build -t maximusmaxi/${service.name}:${TAG} -f ${service.dockerfile} ."
                        sh "docker buildx rm ${buildName}"
                    }
                }
            }
        }
        stage('Test') {
            steps {
                container('python-test') {
                    script {
                        sh '''
                            pytest
                        '''
                    }
                }
            }
        }
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    def services = ['license-registry', 'node-app', 'image-processor', 'frontend', 'orchestrator', 'api-gateway', 'mongo-db']
                    withCredentials([usernamePassword(credentialsId: 'docker_hub', passwordVariable: 'DOCKER_HUB_TOKEN', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh "docker login -u \$DOCKER_HUB_USERNAME -p \$DOCKER_HUB_TOKEN"
                        services.each { service ->
                            sh "docker push maximusmaxi/${service}:${TAG}"
                        }
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh 'kubectl delete pod jenkins-agent-pod --ignore-not-found'
                    sh 'kubectl delete pod tests --ignore-not-found'
                }
            }
        }
    }
}
